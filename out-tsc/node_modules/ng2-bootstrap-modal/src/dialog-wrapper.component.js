var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ViewContainerRef, ViewChild, ComponentFactoryResolver, ReflectiveInjector } from '@angular/core';
export var DialogWrapperComponent = (function () {
    /**
     * Constructor
     * @param {ComponentFactoryResolver} resolver
     */
    function DialogWrapperComponent(resolver) {
        this.resolver = resolver;
        /**
         *
         * @type {boolean}
         */
        this.shown = false;
    }
    /**
     * Adds content dialog component to wrapper
     * @param {Type<DialogComponent>} component
     * @return {DialogComponent}
     */
    DialogWrapperComponent.prototype.addComponent = function (component) {
        var factory = this.resolver.resolveComponentFactory(component);
        var injector = ReflectiveInjector.fromResolvedProviders([], this.element.injector);
        var componentRef = factory.create(injector);
        this.element.insert(componentRef.hostView);
        this.content = componentRef.instance;
        this.content.wrapper = this;
        return this.content;
    };
    /**
     * Shows dialog
     */
    DialogWrapperComponent.prototype.show = function () {
        this.shown = true;
    };
    /**
     * Hides dialog
     */
    DialogWrapperComponent.prototype.hide = function () {
        this.shown = false;
    };
    __decorate([
        ViewChild('element', { read: ViewContainerRef }), 
        __metadata('design:type', ViewContainerRef)
    ], DialogWrapperComponent.prototype, "element", void 0);
    DialogWrapperComponent = __decorate([
        Component({
            selector: 'dialog-wrapper',
            template: "\n  <div class=\"modal fade\" [ngClass]=\"{'in':shown}\" style=\"display:block !important;\" role=\"dialog\">\n    <div class=\"modal-dialog\">\n      <template #element></template>\n    </div>\n  </div>\n  "
        }), 
        __metadata('design:paramtypes', [ComponentFactoryResolver])
    ], DialogWrapperComponent);
    return DialogWrapperComponent;
}());
//# sourceMappingURL=/home/user/Projects/angular2/src/node_modules/ng2-bootstrap-modal/src/dialog-wrapper.component.js.map