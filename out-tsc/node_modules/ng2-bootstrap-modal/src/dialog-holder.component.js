var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver } from "@angular/core";
import { DialogWrapperComponent } from "./dialog-wrapper.component";
export var DialogHolderComponent = (function () {
    /**
     * Constructor
     * @param {ComponentFactoryResolver} resolver
     */
    function DialogHolderComponent(resolver) {
        this.resolver = resolver;
        /**
         * Array of dialogs
         * @type {Array<DialogComponent> }
         */
        this.dialogs = [];
    }
    /**
     * Adds dialog
     * @param {Type<DialogComponent>} component
     * @param {any?} data
     * @param {number?}index
     * @return {Observable<any>}
     */
    DialogHolderComponent.prototype.addDialog = function (component, data, index) {
        var factory = this.resolver.resolveComponentFactory(DialogWrapperComponent);
        var componentRef = this.element.createComponent(factory, index);
        var dialogWrapper = componentRef.instance;
        var _component = dialogWrapper.addComponent(component);
        if (typeof (index) !== 'undefined') {
            this.dialogs.splice(index, 0, _component);
        }
        else {
            this.dialogs.push(_component);
        }
        setTimeout(function () {
            dialogWrapper.show();
        });
        return _component.fillData(data);
    };
    /**
     * Removes dialog
     * @param {DialogComponent} component
     */
    DialogHolderComponent.prototype.removeDialog = function (component) {
        var _this = this;
        component.wrapper.hide();
        setTimeout(function () {
            var index = _this.dialogs.indexOf(component);
            if (index > -1) {
                _this.element.remove(index);
                _this.dialogs.splice(index, 1);
            }
        }, 500);
    };
    __decorate([
        ViewChild('element', { read: ViewContainerRef }), 
        __metadata('design:type', ViewContainerRef)
    ], DialogHolderComponent.prototype, "element", void 0);
    DialogHolderComponent = __decorate([
        Component({
            selector: 'dialog-holder',
            template: '<template #element></template>',
        }), 
        __metadata('design:paramtypes', [ComponentFactoryResolver])
    ], DialogHolderComponent);
    return DialogHolderComponent;
}());
//# sourceMappingURL=/home/user/Projects/angular2/src/node_modules/ng2-bootstrap-modal/src/dialog-holder.component.js.map