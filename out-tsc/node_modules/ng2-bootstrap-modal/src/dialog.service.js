var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable, ComponentFactoryResolver, ApplicationRef, Injector } from "@angular/core";
import { DialogHolderComponent } from "./dialog-holder.component";
export var DialogService = (function () {
    /**
     * @param {ComponentFactoryResolver} resolver
     * @param {ApplicationRef} applicationRef
     * @param {Injector} injector
     */
    function DialogService(resolver, applicationRef, injector) {
        this.resolver = resolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    /**
     * Adds dialog
     * @param {Type<DialogComponent>} component
     * @param {any?} data
     * @param {number?} index
     * @return {Observable<any>}
     */
    DialogService.prototype.addDialog = function (component, data, index) {
        if (!this.dialogHolderComponent) {
            this.dialogHolderComponent = this.createDialogHolder();
        }
        return this.dialogHolderComponent.addDialog(component, data, index);
    };
    /**
     * Hides and removes dialog from DOM
     * @param {DialogComponent} component
     */
    DialogService.prototype.removeDialog = function (component) {
        if (!this.dialogHolderComponent) {
            return;
        }
        this.dialogHolderComponent.removeDialog(component);
    };
    /**
     * Creates and add to DOM dialog holder component
     * @return {DialogHolderComponent}
     */
    DialogService.prototype.createDialogHolder = function () {
        var _this = this;
        var componentFactory = this.resolver.resolveComponentFactory(DialogHolderComponent);
        var componentRef = componentFactory.create(this.injector);
        var componentRootNode = componentRef.hostView.rootNodes[0];
        var componentRootViewConainer = this.applicationRef['_rootComponents'][0];
        var rootLocation = componentRootViewConainer.hostView.rootNodes[0];
        this.applicationRef.attachView(componentRef.hostView);
        componentRef.onDestroy(function () {
            _this.applicationRef.detachView(componentRef.hostView);
        });
        rootLocation.appendChild(componentRootNode);
        return componentRef.instance;
    };
    DialogService = __decorate([
        Injectable(), 
        __metadata('design:paramtypes', [ComponentFactoryResolver, ApplicationRef, Injector])
    ], DialogService);
    return DialogService;
}());
//# sourceMappingURL=/home/user/Projects/angular2/src/node_modules/ng2-bootstrap-modal/src/dialog.service.js.map